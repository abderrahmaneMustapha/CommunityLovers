{"version":3,"sources":["serviceWorker.js","api/login/index.js","apolloClient.js","api/users/index.js","pages/home/index.js","components/forms/signupForm/schema/index.js","api/signup/index.js","utils/handlers/errors/index.js","utils/handlers/success/index.js","components/forms/signupForm/index.js","pages/registration/signup/index.js","components/forms/signinForm/schema/index.js","components/forms/signinForm/index.js","pages/registration/signin/index.js","components/lists/drop/index.js","api/events/index.js","pages/events/dashboard/EventsList/index.js","api/communitys/index.js","pages/events/dashboard/index.js","components/forms/CommunityCreationForm/schema/index.js","components/forms/CommunityCreationForm/index.js","pages/groups/create_community/index.js","components/forms/eventCreationForm/schema/index.js","components/forms/eventCreationForm/index.js","pages/groups/community_page/ReqList/index.js","pages/groups/community_page/eventsList/index.js","pages/groups/community_page/index.js","pages/events/event/RequestMembers/index.js","pages/events/event/index.js","index.js","pages/registration/logout/index.js"],"names":["Boolean","window","location","hostname","match","LOGIN_USER","gql","REFRESH_TOKEN","httpLink","createHttpLink","uri","errorLink","onError","graphQLErrors","operation","networkError","forward","console","err","extensions","code","fromPromise","apolloClient","mutate","mutation","variables","token","localStorage","getItem","then","response","data","refreshToken","log","catch","error","href","filter","value","flatMap","accessToken","oldHeaders","getContext","headers","setContext","authorization","authLink","_","Authorization","ApolloClient","link","ApolloLink","from","cache","InMemoryCache","GET_CURRENT_USER","Home","useQuery","loading","me","undefined","Header","background","pad","Nav","direction","label","map","item","Anchor","key","Main","height","min","Box","gap","align","justify","top","bottom","Heading","level","size","SignupSchema","Yup","shape","firstName","max","required","lastName","email","password1","password2","CREATE_USER","RegistrationErrorHandler","this","props","errors_function","errors","element","message","error_field","React","Component","RegistrationSuccessHandler","auth","setItem","user","id","length","SignupForm","useMutation","createUser","formik","useFormik","initialValues","validationSchema","onSubmit","values","a","Promise","first_name","last_name","register","success","jwt_decode","to","pathname","state","addMember","Form","handleSubmit","htmlFor","name","placeholder","onChange","handleChange","touched","type","Button","primary","color","Signup","history","useHistory","push","fill","width","SigninSchema","password","SigninForm","loginUser","tokenAuth","onClick","Signin","Drop","header","List","community","event","slug","Text","CREATE_EVENT","ALL_CURRENT_EVENTS","ALL_PAST_EVENTS","ALL_UPCOMMING_EVENTS","GET_COMMUNITY_EVENTS_BY_SLUG","GET_CURRENT_EVENT","CREATE_EVENT_JOIN_REQUEST","ACCEPT_EVENT_JOIN_REQUEST","GET_EVENT_REQUEST_PENDING","GET_EVENT_REQUEST_ACCEPTED","PastEvents","getAllPastEvents","eventCreator","startAt","position","CurrentEvents","getAllCurrentEvents","UpcomingEvents","getAllUpcomingEvents","CREATE_COMMUNITY","CREATE_COMMUNITY_OWNER","GET_CURRENT_COMMUNITY_BY_SLUG","GET_CURRENT_USER_COMMUNITYS","ADD_COMMUNITY_JOIN_REQUEST","GET_CUMMUNITY_JOIN_REQUEST","GET_COMMUNITY_MEMBERS","ACCEPT_COMMUNITY_JOIN_REQUEST","items","Dashboard","currentuser_data","currentuser_loading","useState","open","setOpen","reload","DropButton","onOpen","onClose","dropContent","getCurrentUserCommunitys","dropProps","Tabs","Tab","title","CreateGroupSchema","CreateCommunityForm","current_user","user_id","createCommunity","createCommunityOwner","addCommunity","owner","addOwnerToCommunity","CreateCommunity","pk","CreateEventSchema","description","endAt","EventCreationForm","createEvent","Date","endAtDate","setEndAtDate","startAtDate","setStartAtDate","useRouteMatch","moment","format","addEvent","event_id","community_slug","params","icon","View","TextArea","resize","selected","date","newdate","setFieldValue","Layer","onClickOutside","onEsc","margin","left","right","flex","Close","overflow","Markdown","JoinCommunityRequestList","acceptRequest","getCommunityJoinRequests","member","Number","CommunityMemebersList","primaryKey","secondaryKey","onClickItem","username","getCommunityMembers","CommunityEventsList","getCommunityEventsBySlug","EventJoinRequestList","acceptEvent","getEventRequestPending","EventMemebersList","getEventRequestAccepted","EventPage","createEventJoinRequest","getCurrentEvent","createdAt","eventId","Paragraph","textAlign","ReactDOM","render","StrictMode","client","Grommet","theme","grommet","exact","path","component","removeItem","resetStore","addJoinReq","handleJoinCommunity","getCommunitysBySlug","is_owner","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9402b60e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { gql } from 'apollo-boost';\r\n\r\nexport const LOGIN_USER = gql`mutation tokenAuth($email:String!, $password:String!){\r\n            tokenAuth(email:$email, password:$password){\r\n                token,\r\n                refreshToken,\r\n                errors,\r\n                success,\r\n                user{pk, email}\r\n            }\r\n}`\r\n\r\nexport const CHECK_AUTH_TOKEN = gql`mutation verifyToken($token:String!){\r\n      verifyToken(token:$token){\r\n          errors,\r\n          success,\r\n          payload\r\n      }\r\n}`\r\n\r\nexport const REFRESH_TOKEN = gql`mutation refreshToken($token:String!) {\r\n    refreshToken(refreshToken : $token){\r\n        token,\r\n        payload,\r\n        success,\r\n        errors,\r\n    }\r\n}`","import ApolloClient from \"apollo-client\";\r\nimport { createHttpLink } from \"apollo-link-http\";\r\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\r\nimport { setContext } from \"apollo-link-context\";\r\nimport { fromPromise, ApolloLink } from \"apollo-link\";\r\nimport { REFRESH_TOKEN } from \"./api/login/index\";\r\nimport { onError } from \"apollo-link-error\";\r\n\r\n///import { onError } from \"apollo-link-error\";\r\n//import { ApolloLink, Observable } from 'apollo-link';\r\nconst httpLink = createHttpLink({\r\n  uri: \"http://localhost:8000/graphql/\",\r\n});\r\n\r\nconst getNewToken = () => {\r\n  apolloClient\r\n    .mutate({\r\n      mutation: REFRESH_TOKEN,\r\n      variables: { token: localStorage.getItem(\"jwt\") },\r\n    })\r\n    .then((response) => {\r\n      // extract your accessToken from your response data and return it\r\n      const { token } = response.data.data.refreshToken;\r\n      console.log(\"im refreshhing the toke\", token);\r\n      return token;\r\n    });\r\n};\r\n\r\nconst errorLink = onError(\r\n  ({ graphQLErrors, networkError, operation, forward }) => {\r\n    console(\"a graph ql error\")\r\n    if (graphQLErrors) {\r\n      for (let err of graphQLErrors) {\r\n        // eslint-disable-next-line\r\n        switch (err.extensions.code) {\r\n          case \"UNAUTHENTICATED\":\r\n            return fromPromise(\r\n              getNewToken().catch((error) => {\r\n                window.location.href = \"/signin\";\r\n                return;\r\n              })\r\n            )\r\n              .filter((value) => Boolean(value))\r\n              .flatMap((accessToken) => {\r\n                const oldHeaders = operation.getContext().headers;\r\n                // modify the operation context with a new token\r\n                operation.setContext({\r\n                  headers: {\r\n                    ...oldHeaders,\r\n                    authorization: `JWT ${accessToken}`,\r\n                  },\r\n                });\r\n\r\n                // retry the request, returning the new observable\r\n                return forward(operation);\r\n              });\r\n        }\r\n      }\r\n    }\r\n  }\r\n);\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n  // get the authentication token from local storage if it exists\r\n\r\n  const token = localStorage.getItem(\"jwt\");\r\n  // return the headers to the context so httpLink can read them\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      Authorization: token ? \"JWT \" + token : \"\",\r\n    },\r\n  };\r\n});\r\n\r\nexport const apolloClient = new ApolloClient({\r\n  uri: \"http://localhost:8000/graphql/\",\r\n  onError : errorLink,\r\n  link: ApolloLink.from([authLink, httpLink]),\r\n  cache: new InMemoryCache(),\r\n});\r\n","import { gql } from 'apollo-boost';\r\n\r\n\r\nexport const GET_CURRENT_USER  = gql`query{\r\n    me{\r\n      pk,\r\n      email\r\n    }\r\n  }`\r\n\r\n\r\n","import React from \"react\";\r\nimport { GET_CURRENT_USER } from \"../../api/users/index\";\r\nimport { useQuery } from \"react-apollo\";\r\nimport { Heading, Anchor, Header, Nav, Main, Box } from \"grommet\";\r\n\r\nfunction Home() {\r\n  const { data, loading } = useQuery(GET_CURRENT_USER);\r\n\r\n  const items_notauth = [\r\n    { label: \"Login\", href: \"/signin\" },\r\n    { label: \"Signup\", href: \"/signup\" },\r\n  ];\r\n\r\n  const items_auth = [{ label: \"Dashboard\", href: \"/dashboard/me\" }, { label: \"Logout\", href: \"/Logout\" }];\r\n\r\n  if (loading === true && !data) return <div>Loading ... </div>;\r\n\r\n  const me = data ? data.me : undefined;\r\n  \r\n  return (\r\n    <>\r\n      <Header background=\"dark-1\" pad=\"small\">\r\n        \r\n          {me ? (\r\n            <Nav direction=\"row\" >\r\n              {items_auth.map((item) => (\r\n                <Anchor  href={item.href} label={item.label} key={item.label} /> \r\n\r\n              ))}\r\n            </Nav>\r\n          ) : (\r\n            <Nav direction=\"row\" >\r\n              {items_notauth.map((item) => (\r\n                <Anchor href={item.href} label={item.label} key={item.label} /> \r\n              ))}\r\n            </Nav>\r\n          )}\r\n       \r\n      </Header>\r\n      <Main background=\"dark-1\" pad=\"large\" height={{ min: \"100vh\"}}>\r\n        <Box\r\n          gap=\"small\"\r\n          direction=\"column\"\r\n          align=\"center\"\r\n          justify=\"end\"\r\n          pad={{ top: \"medium\", bottom: \"small\" }}\r\n        >\r\n          <Heading gap=\"medium\" align=\"center\" level=\"1\" size=\"large\">\r\n            We Are Community Lovers\r\n          </Heading>\r\n\r\n          <Heading gap=\"medium\" align=\"center\" level=\"2\" size=\"large\">\r\n            An open community platform\r\n          </Heading>\r\n        </Box>\r\n      </Main>\r\n    </>\r\n  );\r\n}\r\nexport default Home;\r\n","import * as Yup from \"yup\";\r\nexport const SignupSchema = Yup.object().shape({\r\n    firstName: Yup.string()\r\n      .min(2, 'Too Short!')\r\n      .max(100, 'Too Long!')\r\n      .required('Required'),\r\n    lastName: Yup.string()\r\n        .min(2, 'Too Short!')\r\n        .max(100, 'Too Long!')\r\n        .required('Required'),\r\n    email: Yup.string()\r\n        .email(\"Please Enter a valide email adress\")\r\n        .required('Required'),\r\n    password1: Yup.string()\r\n        .min(8, 'Too Short!')\r\n        .max(100, 'Too Long!')\r\n        .required('Required'),\r\n    password2: Yup.string()\r\n        .min(8, 'Too Short!')\r\n        .max(100, 'Too Long!')\r\n        .required('Required'),\r\n  });","import { gql } from 'apollo-boost';\r\n\r\n/// create user mutation\r\nexport const CREATE_USER = gql `mutation register($first_name:String!, $last_name:String!, $email:String!, \r\n                            $password1:String!, $password2:String!){                \r\n                            register(firstName: $first_name, lastName:$last_name, email:$email,\r\n                            password1: $password1, password2:$password2){\r\n                                success,\r\n                                errors,\r\n                                token,\r\n                                refreshToken\r\n                        }}`\r\n\r\n                \r\n//export const  LIST_USERS = gql``","import React from \"react\"\r\n\r\nexport class  RegistrationErrorHandler extends React.Component{\r\n    render(){\r\n       const data =  this.props.data\r\n    \r\n        if (this.props.errors_function){\r\n            return(\r\n                <ul>\r\n            \r\n                { \r\n                    data.errors ? data.errors[this.props.errors_function].map(\r\n                        element=>(\r\n                            <li>{element.message}</li>\r\n                        ))  \r\n                    : undefined                    \r\n                }\r\n                </ul>\r\n            )\r\n        }\r\n        else{\r\n            return(\r\n            <ul>\r\n            \r\n            { data.errors ? data.errors.map(element=>(\r\n                element[this.props.error_field].map(element=>(\r\n                    <li>{element}</li>\r\n                ))\r\n            ))  \r\n                : undefined }\r\n            </ul>  \r\n            )\r\n        }\r\n     \r\n    }\r\n       \r\n    \r\n}","import React from \"react\"\r\n\r\n\r\n\r\nexport class  RegistrationSuccessHandler extends React.Component{\r\n\r\n\r\n    render(){\r\n        const data = this.props.data\r\n        console.log(data)\r\n        console.log(this.props.auth)\r\n        if (data.token  && this.props.auth===true){\r\n            console.log(data)\r\n            localStorage.setItem('jwt', data.token)\r\n            localStorage.setItem('user_id', data.user.id)\r\n        }\r\n        \r\n        return(\r\n            <>        \r\n            { \r\n                data.errors.length === 0  ?\r\n                 \r\n                <div>{this.props.message}</div> :undefined\r\n            }            \r\n            </>\r\n        )\r\n    }\r\n}","import React from \"react\"\r\nimport {useMutation } from 'react-apollo';\r\nimport jwt_decode from \"jwt-decode\";\r\nimport {SignupSchema} from \"./schema/index\"\r\nimport { useFormik} from 'formik'\r\nimport {\r\n    Button,\r\n    Form,\r\n    FormField as Field,\r\n  } from 'grommet';\r\n\r\nimport {CREATE_USER} from \"../../../api/signup/index\"\r\n\r\n\r\nimport {Redirect} from \"react-router-dom\"\r\nimport { RegistrationErrorHandler} from '../../../utils/handlers/errors/index'\r\nimport {RegistrationSuccessHandler} from '../../../utils/handlers/success/index'\r\n// lets use this link later when we want handle errors\r\n//import { onError } from 'apollo-link-error';\r\n\r\nfunction SignupForm (props){\r\n \r\n    const [createUser, { data,error,loading }  ] = useMutation(CREATE_USER)\r\n   const formik  =useFormik({\r\n\r\n        initialValues: {\r\n                    firstName: \"\",\r\n                    lastName: \"\",\r\n                    email : \"\",\r\n                    password1 : \"\",\r\n                    password2 : \"\",\r\n        },\r\n        validationSchema: SignupSchema,\r\n        onSubmit :  async values => { await new Promise( \r\n\r\n                createUser(\r\n                    { variables: {\r\n                        first_name: values.firstName,\r\n                        last_name: values.lastName,\r\n                        email : values.email,\r\n                        password1 : values.password1,\r\n                        password2 : values.password2,\r\n                    }}\r\n                ).then(data=>{\r\n                    if(data.data.register.success){\r\n                        localStorage.setItem(\"jwt\", data.data.register.token)\r\n                        localStorage.setItem(\"jwt_refresh\", data.data.register.refreshToken)\r\n                        localStorage.setItem(\"user_email\", jwt_decode(data.data.register.token).email)\r\n                      \r\n                    }\r\n                    \r\n                })\r\n                )\r\n            }})\r\n\r\n        if (error) return (<>{console.log(\"this is an error\",error)}</>)\r\n        if (loading) return (<p>{console.log(\"this is a loading\",loading)}</p>)\r\n\r\n        if(data){\r\n            if(data.register.success){\r\n               \r\n                return <Redirect \r\n                to={{pathname:\"/dashboard/me\" ,\r\n                state:{ message:'User created successfuly'}}}/>\r\n            }\r\n        }\r\n        \r\n          \r\n\r\n        return(\r\n            <> { data ?\r\n                (\r\n                    <>\r\n                        <RegistrationErrorHandler  data={data.addMember}  error_field=\"messages\" />\r\n                        <RegistrationSuccessHandler \r\n                            data={data.addMember}   \r\n                            message='User created successfuly you will be redirected soon'                     \r\n                        /> \r\n                                           \r\n                    </>\r\n                    \r\n                                           \r\n                )\r\n                   \r\n                :   undefined }                \r\n                \r\n                \r\n                    <Form  onSubmit={formik.handleSubmit}>\r\n\r\n                    <label htmlFor=\"firstName\">First Name</label>\r\n                    <Field id=\"firstName\" name=\"firstName\" placeholder=\"Jane\"  onChange={formik.handleChange} />\r\n                    {formik.errors.firstName && formik.touched.firstName ?\r\n                    (<div>{formik.errors.firstName}</div>) : null}\r\n\r\n                    <label htmlFor=\"lastName\">Last Name</label>\r\n                    <Field id=\"lastName\" name=\"lastName\" placeholder=\"Doe\"  onChange={formik.handleChange} />\r\n                    {formik.errors.lastName && formik.touched.lastName ?\r\n                    (<div>{formik.errors.lastName}</div>) : null}\r\n\r\n                    <label htmlFor=\"email\">Email</label>\r\n                    <Field\r\n                    id=\"email\"\r\n                    name=\"email\"\r\n                    placeholder=\"example@example.com\"\r\n                    type=\"email\"\r\n                    onChange={formik.handleChange}\r\n                    />\r\n                    {formik.errors.email && formik.touched.email ?\r\n                    (<div>{formik.errors.email}</div>) : null}\r\n\r\n                    <label htmlFor=\"password1\">Password</label>\r\n                    <Field\r\n                    id=\"password1\"\r\n                    name=\"password1\"\r\n                    placeholder=\"password\"\r\n                    type=\"password\"\r\n                    onChange={formik.handleChange}\r\n                    />\r\n                    {formik.errors.password1 && formik.touched.password1 ?\r\n                    (<div>{formik.errors.password1}</div>) : null}\r\n\r\n                    <label htmlFor=\"password2\">Password Confirmation</label>\r\n                    <Field\r\n                    id=\"password2\"\r\n                    name=\"password2\"\r\n                    placeholder=\"password confirmation\"\r\n                    type=\"password\"\r\n                    onChange={formik.handleChange}\r\n                    />\r\n                    {formik.errors.password2 && formik.touched.password2 ?\r\n                    (<div>{formik.errors.password2}</div>) : null}\r\n\r\n                    <Button \r\n                        primary \r\n                        label=\"Submit\" \r\n                        type=\"submit\"\r\n                        color=\"dark-1\" \r\n                        >                        \r\n                    </Button>\r\n                    \r\n                    </Form>\r\n                   \r\n            \r\n            </>\r\n        )\r\n    \r\n}\r\n\r\nexport default SignupForm","import React from \"react\"\r\nimport SignupForm from \"../../../components/forms/signupForm/index\"\r\n\r\nimport { GET_CURRENT_USER } from \"../../../api/users/index\";\r\nimport { useQuery } from \"react-apollo\";\r\nimport {useHistory} from \"react-router-dom\"\r\nimport {\r\n    Box,\r\n    Heading\r\n    ,Header ,\r\n    Anchor\r\n  } from 'grommet';\r\n  \r\nfunction Signup (){\r\n        const { data, loading } = useQuery(GET_CURRENT_USER);\r\n        let history = useHistory()\r\n        if(loading) return <div>loading ....</div>\r\n\r\n        let me  = data ? data.me :  undefined\r\n        if(me) {\r\n            \r\n            history.push(\"/dashboard/me\")\r\n        }\r\n        return(\r\n            <>\r\n                    <Box fill align=\"center\"    justify=\"center\">\r\n                    <Box width=\"medium\">\r\n                    <Header  pad=\"small\">\r\n                    <Heading level={2} size=\"medium\">\r\n                        Signup\r\n                    </Heading>\r\n                    </Header> \r\n\r\n                    <SignupForm />\r\n\r\n                    <Anchor color=\"dark-1\" gap=\"large\"  to=\"/signin/\">Already have an account create a one here</Anchor>\r\n                    </Box>\r\n                    </Box>\r\n             \r\n\r\n            </>\r\n        )\r\n\r\n}\r\n\r\nexport default Signup","import * as Yup from \"yup\";\r\nexport const SigninSchema = Yup.object().shape({\r\n    email: Yup.string()\r\n        .email(\"Please Enter a valide email adress\")\r\n        .required('Required'),\r\n    password: Yup.string()\r\n        .min(8, 'Too Short!')\r\n        .max(100, 'Too Long!')\r\n        .required('Required'),\r\n  });","import React from \"react\"\r\nimport {useMutation } from 'react-apollo';\r\nimport jwt_decode from \"jwt-decode\";\r\nimport {\r\n    Button,\r\n    Form,\r\n    FormField as Field,\r\n\r\n  } from 'grommet';\r\nimport { useFormik  } from 'formik'\r\n\r\n// me\r\nimport {LOGIN_USER} from \"../../../api/login/index\"\r\nimport {SigninSchema} from \"./schema/index\"\r\n\r\nimport {Redirect} from \"react-router-dom\"\r\n\r\nimport {  RegistrationErrorHandler} from '../../../utils/handlers/errors/index'\r\nimport { RegistrationSuccessHandler} from '../../../utils/handlers/success/index'\r\n// lets use this link later when we want handle errors\r\n//import { onError } from 'apollo-link-error';\r\n\r\nfunction SigninForm (){\r\n    \r\n    const [loginUser, { data,loading }  ] = useMutation(LOGIN_USER)\r\n   \r\n    \r\n    const formik = useFormik({\r\n        initialValues : {\r\n            email : \"\",\r\n            password : \"\",\r\n        },\r\n        validationSchema : SigninSchema,\r\n        onSubmit :  async values => { await new Promise( \r\n            loginUser(\r\n                    { variables: {\r\n                        email : values.email,\r\n                        password : values.password\r\n                    }}\r\n                ).then(data=>{\r\n                    if(data.data.tokenAuth.success){\r\n                        localStorage.setItem(\"jwt\", data.data.tokenAuth.token)\r\n                        localStorage.setItem(\"jwt_refresh\", data.data.tokenAuth.refreshToken)\r\n                        localStorage.setItem(\"user_email\", jwt_decode(data.data.tokenAuth.token).email)\r\n                    }\r\n                    \r\n                })\r\n            )\r\n        }\r\n    })\r\n     \r\n    console.log(formik)\r\n    if (loading) return (<p>{loading}</p>)\r\n      \r\n    if(data){\r\n        if(data.tokenAuth.success){\r\n           \r\n            return <Redirect \r\n            from=\"/signin\"\r\n            to={{pathname:\"dashboard/me\",\r\n            state:{ message:'Logged in successfuly'}}}\r\n            />\r\n        }\r\n    } \r\n    \r\n        return(\r\n            <>\r\n             \r\n                { data ?\r\n                (<>\r\n                    <RegistrationErrorHandler  data ={data.tokenAuth} errors_function=\"nonFieldErrors\" error_field=\"message\" />\r\n                    <RegistrationSuccessHandler data ={data.tokenAuth}  auth={true} message=\"successfuly authentificated you will be redirected soon\" />\r\n                </>)\r\n                :   undefined}            \r\n                \r\n\r\n                \r\n                    <Form  >\r\n                    <label htmlFor=\"email\">Email</label>\r\n                    <Field\r\n                    id=\"email\"\r\n                    name=\"email\"\r\n                    placeholder=\"example@example.com\"\r\n                    type=\"email\"\r\n                    onChange={formik.handleChange}\r\n                    />\r\n                    {formik.errors.email && formik.touched.email ?\r\n                    (<div>{formik.errors.email}</div>) : null}\r\n\r\n                    <label htmlFor=\"password\">Password</label>\r\n                    <Field\r\n                    id=\"password\"\r\n                    name=\"password\"\r\n                    placeholder=\"password\"\r\n                    type=\"password\"\r\n                    onChange={formik.handleChange}\r\n                   \r\n                    />\r\n                    {formik.errors.password && formik.touched.password ?\r\n                    (<div>{formik.errors.password}</div>) : null}\r\n                \r\n                    <Button \r\n                        primary  \r\n                        color=\"dark-1\" \r\n                        label=\"Submit\"\r\n                        onClick={formik.handleSubmit} \r\n                        type=\"submit\">                        \r\n                    </Button>\r\n                    \r\n                    </Form>\r\n                    \r\n            </>\r\n        )\r\n\r\n    \r\n    \r\n}\r\n\r\nexport default SigninForm","import React from \"react\"\r\nimport SigninForm from \"../../../components/forms/signinForm/index\"\r\n\r\nimport { GET_CURRENT_USER } from \"../../../api/users/index\";\r\nimport { useQuery } from \"react-apollo\";\r\nimport {useHistory} from \"react-router-dom\"\r\nimport {\r\n    Box,\r\n    Heading,\r\n    Header,\r\n    Anchor,\r\n  } from 'grommet';\r\nfunction Signin (){\r\n        const { data, loading } = useQuery(GET_CURRENT_USER);\r\n        let history = useHistory()\r\n        if(loading) return <div>loading ....</div>\r\n\r\n        let me  = data ? data.me :  undefined\r\n        if(me) {\r\n            \r\n            history.push(\"/dashboard/me\")\r\n        }\r\n        return(            \r\n        \r\n\r\n             <Box fill align=\"center\"  pad=\"small\" justify=\"center\">\r\n                <Box width=\"medium\">\r\n                <Header  pad=\"small\">\r\n                    <Heading level={2} size=\"medium\">\r\n                            Signin\r\n                    </Heading>\r\n                </Header>  \r\n\r\n                <SigninForm />\r\n                <Anchor color=\"dark-1\"   to=\"signup/\">Create new account</Anchor>\r\n                </Box>\r\n            </Box>\r\n        \r\n        )\r\n      \r\n\r\n\r\n    }\r\n\r\nexport default Signin\r\n","import React from \"react\"\r\nimport {Box, List, Heading, Text} from \"grommet\"\r\nimport { useHistory } from \"react-router-dom\";\r\nexport function Drop(props){\r\n    let history = useHistory()\r\n    console.log(\"drop props \",props)\r\n    return(\r\n        <>\r\n        <Heading level=\"5\" >{props.header}</Heading>\r\n        \r\n        <List data={props.data} >\r\n            {  \r\n                (element)=>(     \r\n                    <Box  key={element.community.id}  onClick={event=>\r\n                        (history.push(`/communities/${element.community.slug}`))\r\n                        } \r\n                    fill>                            \r\n                        <Text size=\"small\">{element.community.name}</Text>\r\n                    </Box>                        \r\n                 )\r\n            }\r\n        </List>\r\n        </>\r\n    )\r\n}","import { gql } from \"apollo-boost\";\r\n\r\nexport const CREATE_EVENT = gql`\r\n  mutation addEvent(\r\n    $name: String!\r\n    $eventCreator: ID!\r\n    $description: String!\r\n    $position: String!\r\n    $startAt: Date!\r\n    $endAt: Date!\r\n  ) {\r\n    addEvent(\r\n      input: {\r\n        name: $name\r\n        eventCreator: $eventCreator\r\n        description: $description\r\n        position: $position\r\n        startAt: $startAt\r\n        endAt: $endAt\r\n      }\r\n    ) {\r\n      errors {\r\n        field\r\n        messages\r\n      }\r\n      event {\r\n        id\r\n        name\r\n        slug\r\n        position\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ALL_EVENTS = gql`\r\n  query {\r\n    allEvents {\r\n      id\r\n      name\r\n      eventCreator {\r\n        owner {\r\n          email\r\n        }\r\n        community {\r\n          name\r\n        }\r\n      }\r\n      slug\r\n      description\r\n      position\r\n      startAt\r\n      endAt\r\n    }\r\n  }\r\n`;\r\n\r\n\r\nexport const ALL_CURRENT_EVENTS = gql`\r\n  query {\r\n    getAllCurrentEvents {\r\n      id\r\n      name\r\n      eventCreator {\r\n        owner {\r\n          email\r\n        }\r\n        community {\r\n          name\r\n        }\r\n      }\r\n      slug\r\n      description\r\n      position\r\n      startAt\r\n      endAt\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ALL_PAST_EVENTS = gql`\r\n  query {\r\n    getAllPastEvents {\r\n      id\r\n      name\r\n      eventCreator {\r\n        owner {\r\n          email\r\n        }\r\n        community {\r\n          name\r\n        }\r\n      }\r\n      slug\r\n      description\r\n      position\r\n      startAt\r\n      endAt\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ALL_UPCOMMING_EVENTS = gql`\r\n  query {\r\n    getAllUpcomingEvents {\r\n      id\r\n      name\r\n      eventCreator {\r\n        owner {\r\n          email\r\n        }\r\n        community {\r\n          name\r\n        }\r\n      }\r\n      slug\r\n      description\r\n      position\r\n      startAt\r\n      endAt\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_COMMUNITY_EVENTS_BY_SLUG = gql`\r\n  query getCommunityEventsBySlug($slug: String!) {\r\n    getCommunityEventsBySlug(slug: $slug) {\r\n      id\r\n      name\r\n      slug\r\n      description\r\n      position\r\n      startAt\r\n      endAt\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_CURRENT_EVENT = gql`\r\n  query getCurrentEvent($id: ID!) {\r\n    getCurrentEvent(id: $id) {\r\n      id\r\n      name\r\n      slug\r\n      eventCreator {\r\n        owner {\r\n          firstName\r\n          lastName\r\n        }\r\n        community {\r\n          name\r\n          slug\r\n        }\r\n      }\r\n      description\r\n      position\r\n      startAt\r\n      endAt\r\n    }\r\n  }\r\n`;\r\n\r\nexport const CREATE_EVENT_JOIN_REQUEST = gql`\r\n  mutation createEventJoinRequest($eventId: ID!) {\r\n    createEventJoinRequest(eventId: $eventId) {\r\n      success\r\n      eventJoinReq {\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ACCEPT_EVENT_JOIN_REQUEST = gql`\r\n  mutation acceptEventJoinRequest($id: ID!) {\r\n    acceptEventJoinRequest(id: $id) {\r\n      success\r\n      eventJoinReq {\r\n        id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const  GET_EVENT_REQUEST_PENDING = gql`query getEventRequestPending($id:ID!){  \r\n  getEventRequestPending(id:$id){\r\n    id,\r\n    member{username,firstName,lastName,email}\r\n  }\r\n}`\r\n\r\nexport const  GET_EVENT_REQUEST_ACCEPTED = gql`query getEventRequestAccepted($id:ID!){  \r\n  getEventRequestAccepted(id:$id){\r\n    id,\r\n    member{id,username,firstName,lastName,email}\r\n  }\r\n}`\r\n\r\n","import React from \"react\"\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useQuery } from \"react-apollo\";\r\nimport { ALL_CURRENT_EVENTS,ALL_PAST_EVENTS,ALL_UPCOMMING_EVENTS } from \"../../../../api/events/index\";\r\nimport {\r\n    Text,\r\n    List,\r\n    Box,\r\n    Heading\r\n  } from \"grommet\";\r\n\r\nexport function PastEvents(){\r\n    const { loading, data } = useQuery(ALL_PAST_EVENTS);\r\n    \r\n    let history = useHistory();\r\n    if (loading) return <div>Loading ... </div>\r\n    return(\r\n        <>\r\n        {data ? (\r\n            <List data={data.getAllPastEvents}>\r\n              {(element) => (\r\n                <Box\r\n                  key={element.id}\r\n                  onClick={(event) => history.push(`/event/${element.id}`)}\r\n                  fill\r\n                >\r\n                  <Heading level=\"4\">{element.name}</Heading>\r\n                  <Text size=\"small\">\r\n                    {\" \"}\r\n                    by {element.eventCreator.community.name}\r\n                  </Text>\r\n                  <Text size=\"small\"> on {element.startAt}</Text>\r\n                  <Text size=\"small\"> place {element.position}</Text>\r\n\r\n                \r\n                </Box>\r\n              )}\r\n            </List>\r\n          ) : (\r\n            <div>Loading...</div>\r\n          )}\r\n          </>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport function CurrentEvents(){\r\n    const { loading, data } = useQuery( ALL_CURRENT_EVENTS);\r\n    \r\n    let history = useHistory();\r\n    if (loading) return <div>Loading ... </div>\r\n    return(\r\n        <>\r\n        {data ? (\r\n            <List data={data.getAllCurrentEvents}>\r\n              {(element) => (\r\n                <Box\r\n                  key={element.id}\r\n                  onClick={(event) => history.push(`/event/${element.id}`)}\r\n                  fill\r\n                >\r\n                  <Heading level=\"4\">{element.name}</Heading>\r\n                  <Text size=\"small\">\r\n                    {\" \"}\r\n                    by {element.eventCreator.community.name}\r\n                  </Text>\r\n                  <Text size=\"small\"> on {element.startAt}</Text>\r\n                  <Text size=\"small\"> place {element.position}</Text>\r\n\r\n                \r\n                </Box>\r\n              )}\r\n            </List>\r\n          ) : (\r\n            <div>Loading...</div>\r\n          )}\r\n          </>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport function UpcomingEvents(){\r\n    const { loading,  data } = useQuery(ALL_UPCOMMING_EVENTS);\r\n    console.log(data)\r\n    let history = useHistory();\r\n    if (loading) return <div>Loading ... </div>\r\n    return(\r\n        <>\r\n        {data ? (\r\n            <List data={data.getAllUpcomingEvents}>\r\n              {(element) => (\r\n                <Box\r\n                  key={element.id}\r\n                  onClick={(event) => history.push(`/event/${element.id}`)}\r\n                  fill\r\n                >\r\n                  <Heading level=\"4\">{element.name}</Heading>\r\n                  <Text size=\"small\">\r\n                    {\" \"}\r\n                    by {element.eventCreator.community.name}\r\n                  </Text>\r\n                  <Text size=\"small\"> on {element.startAt}</Text>\r\n                  <Text size=\"small\"> place {element.position}</Text>\r\n\r\n                \r\n                </Box>\r\n              )}\r\n            </List>\r\n          ) : (\r\n            <div>Loading...</div>\r\n          )}\r\n          </>\r\n    )\r\n}","import { gql } from \"apollo-boost\";\r\n\r\nexport const CREATE_COMMUNITY = gql`\r\n  mutation addCommunity($name: String!) {\r\n    addCommunity(input: { name: $name }) {\r\n      errors {\r\n        field\r\n        messages\r\n      }\r\n      community {\r\n        id\r\n        slug\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const CREATE_COMMUNITY_OWNER = gql`\r\n  mutation addOwnerToCommunity($owner: ID!, $community: ID!) {\r\n    addOwnerToCommunity(input: { owner: $owner, community: $community }) {\r\n      communityOwner {\r\n        id\r\n      }\r\n      errors {\r\n        field\r\n        messages\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_CURRENT_COMMUNITY_BY_SLUG = gql`\r\n  query getCommunitysBySlug($slug: String!) {\r\n    getCommunitysBySlug(slug: $slug) {\r\n      id\r\n      owner {\r\n        id\r\n        email\r\n        dateJoined\r\n        username\r\n        firstName\r\n        lastName\r\n      }\r\n      community {\r\n        id\r\n        name\r\n        slug\r\n        createdAt\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_CURRENT_COMMUNITY_OWNER = gql`\r\n  query {\r\n    getCurrentCommunityOwner {\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_CURRENT_USER_COMMUNITYS = gql`\r\n  query {\r\n    getCurrentUserCommunitys {\r\n      community {\r\n        name\r\n        slug\r\n      }\r\n      owner {\r\n        email\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_COMMUNITY_JOIN_REQUEST = gql`\r\n  mutation addCommunityJoinRequest($community: ID!) {\r\n    addCommunityJoinRequest(community: $community) {\r\n      success\r\n      communityJoinReq {\r\n        member {\r\n          id\r\n        }\r\n        community {\r\n          id\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_CUMMUNITY_JOIN_REQUEST = gql`\r\n  query getCommunityJoinRequests($slug: String!) {\r\n    getCommunityJoinRequests(slug: $slug) {\r\n      id\r\n      member {\r\n        id\r\n        email\r\n        firstName\r\n        lastName\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const GET_COMMUNITY_MEMBERS = gql`\r\n  query getCommunityMembers($slug: String!) {\r\n    getCommunityMembers(slug: $slug) {\r\n      member {\r\n        id\r\n        email\r\n        firstName\r\n        lastName\r\n        city\r\n        profilePic\r\n        country\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ACCEPT_COMMUNITY_JOIN_REQUEST = gql`\r\n  mutation acceptCommunityJoinRequest($id: ID!) {\r\n    acceptCommunityJoinRequest(id: $id) {\r\n      success\r\n      communityJoinReq {\r\n        id\r\n        member {\r\n          id\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React from \"react\";\r\n\r\nimport { useQuery } from \"react-apollo\";\r\nimport { Drop } from \"../../../components/lists/drop/index\";\r\nimport { CurrentEvents, PastEvents, UpcomingEvents } from \"./EventsList/index\";\r\nimport { GET_CURRENT_USER_COMMUNITYS } from \"../../../api/communitys/index\";\r\n\r\nimport {\r\n  Heading,\r\n  Tabs,\r\n  Tab,\r\n  Anchor,\r\n  Header,\r\n  Nav,\r\n  Main,\r\n  Box,\r\n  DropButton,\r\n} from \"grommet\";\r\n\r\nconst items = [\r\n  { label: \"Create new Community\", href: \"/create-community\" },\r\n  { label: \"Logout \", href: \"/logout\" },\r\n];\r\n\r\nfunction Dashboard() {\r\n  const { data: currentuser_data, loading: currentuser_loading } = useQuery(\r\n    GET_CURRENT_USER_COMMUNITYS\r\n  );\r\n\r\n  const [open, setOpen] = React.useState();\r\n\r\n  const onOpen = () => {\r\n    setOpen(true);\r\n  };\r\n  const onClose = () => {\r\n    setOpen(false);\r\n  };\r\n  if(!currentuser_loading && !currentuser_data ) window.location.reload(false);\r\n  if (currentuser_loading || !currentuser_data ) return <div>Loading</div>;\r\n \r\n  return (\r\n    <>\r\n      <Header background=\"dark-1\" pad=\"small\">\r\n        <Nav direction=\"row\">\r\n          {items.map((item) => (\r\n            <Anchor href={item.href} label={item.label} key={item.label} />\r\n          ))}\r\n          {currentuser_data ? (\r\n            <DropButton\r\n              label=\"Options\"\r\n              open={open}\r\n              onOpen={onOpen}\r\n              onClose={onClose}\r\n              dropContent={\r\n                <Drop\r\n                  data={currentuser_data.getCurrentUserCommunitys}\r\n                  header={\"Communitys\"}\r\n                />\r\n              }\r\n              dropProps={{ align: { top: \"bottom\" } }}\r\n            />\r\n          ) : undefined}\r\n        </Nav>\r\n      </Header>\r\n      <Main>\r\n        <Box pad=\"small\">\r\n          <Heading level=\"3\">\r\n            Here is what happening in Community Lovers\r\n          </Heading>\r\n        </Box>\r\n\r\n        <Box gap=\"medium\" pad=\"large\">\r\n          <Tabs>\r\n            <Tab title=\"Past events\">\r\n              <PastEvents />\r\n            </Tab>\r\n            <Tab title=\"Current events\">\r\n              <CurrentEvents />\r\n            </Tab>\r\n            <Tab title=\"Up comming events\">\r\n              <UpcomingEvents />\r\n            </Tab>\r\n          </Tabs>\r\n        </Box>\r\n      </Main>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n","import * as Yup from \"yup\";\r\nexport const CreateGroupSchema = Yup.object().shape({\r\n    name: Yup.string()\r\n        .min(5, 'Too Short!')\r\n        .max(100, 'Too Long!')\r\n        .required('Required'),\r\n  });","import React,  {useState} from \"react\"\r\nimport {CREATE_COMMUNITY, CREATE_COMMUNITY_OWNER} from \"../../../api/communitys/index\"\r\n\r\nimport {  RegistrationErrorHandler} from '../../../utils/handlers/errors/index'\r\nimport { RegistrationSuccessHandler} from '../../../utils/handlers/success/index'\r\n\r\nimport {useMutation } from 'react-apollo';\r\nimport {CreateGroupSchema} from \"./schema/index\"\r\nimport {useHistory } from \"react-router-dom\"\r\nimport { useFormik  } from 'formik'\r\n\r\nimport {\r\n    Button,\r\n    Form,\r\n    FormField as Field,\r\n  } from 'grommet';\r\n\r\nexport default function CreateCommunityForm(props){\r\n    const history = useHistory();\r\n  \r\n\r\n    const [user_id]=  useState(props.current_user)\r\n \r\n    const [createCommunity, { data,loading, error}  ] = useMutation(CREATE_COMMUNITY)\r\n    const [createCommunityOwner] = useMutation(CREATE_COMMUNITY_OWNER)\r\n    \r\n    const formik = useFormik({\r\n        initialValues : {\r\n            name : \"\",\r\n        },\r\n        validationSchema:CreateGroupSchema,\r\n        onSubmit : async values => { await new Promise( \r\n\r\n            createCommunity(\r\n                        { variables: {\r\n                            name : values.name,\r\n                        }}\r\n                    ).then((data)=>{\r\n                    \r\n                        if(data.data.addCommunity.errors.length < 1){\r\n                            let id =data.data.addCommunity.community.id\r\n                            let slug =data.data.addCommunity.community.slug\r\n                          createCommunityOwner(\r\n                                { variables: {\r\n                                    community : id,\r\n                                    owner : user_id\r\n                                 }}\r\n                            ).then(data=>{\r\n                        \r\n                                if(data.data.addOwnerToCommunity.errors.length<1){\r\n                                    history.push(`/communities/${slug}`)\r\n                                }\r\n                            }\r\n\r\n                            )\r\n                        }                                \r\n                    }))\r\n                }\r\n    })\r\n     \r\n    if (error)  console.log(error)\r\n    if (loading ) return (<p>{loading}</p>)\r\n\r\n    return (\r\n        <>\r\n        { data ?\r\n            ( <>\r\n                        <RegistrationErrorHandler  data={data.addCommunity}  error_field=\"messages\" />\r\n                        <RegistrationSuccessHandler \r\n                            data={data.addCommunity}   \r\n                            message='Community created successfuly you will be redirected soon'                     \r\n                        /> \r\n                                           \r\n            </>)\r\n            :   undefined}\r\n  \r\n           \r\n               \r\n                    <Form>\r\n                        <label htmlFor=\"name\">Community</label>\r\n\r\n                        <Field\r\n                            id=\"name\"\r\n                            name=\"name\"\r\n                            placeholder=\"your community name\"\r\n                            type=\"text\"\r\n                            onChange={formik.handleChange}\r\n                        />\r\n                        {formik.errors.name && formik.touched.name ?\r\n                        (<div>{formik.errors.name}</div>) : null}\r\n\r\n                        <Button \r\n                            primary  \r\n                            color=\"dark-1\" \r\n                            label=\"Submit\"\r\n                            onClick={formik.handleSubmit} \r\n                            type=\"submit\">                        \r\n                        </Button>   \r\n                                        \r\n                    </Form>\r\n           \r\n  \r\n        </>\r\n    )\r\n}","import React  from \"react\"\r\nimport CreateCommunityForm  from \"../../../components/forms/CommunityCreationForm/index\"\r\n\r\nimport { Heading , Anchor,  Header, Nav, Main, Box } from 'grommet';\r\nimport { GET_CURRENT_USER} from \"../../../api/users/index\"\r\nimport {useQuery } from 'react-apollo';\r\nconst items = [\r\n    { label: 'go back to dashboard', href: 'dashboard/me' },\r\n    { label: 'Logout ', href: '/logout' },\r\n];\r\nfunction CreateCommunity ()  {\r\n    const { data,loading, error} = useQuery(GET_CURRENT_USER)\r\n    \r\n    if(loading) return<div>loading...</div>\r\n    if(error) console.log(error)\r\n   \r\n\r\n        return(\r\n            <>\r\n            <Header background=\"dark-1\" pad=\"small\">\r\n                <Nav direction=\"row\">\r\n                    {items.map(item => (\r\n                    <Anchor href={item.href} label={item.label} key={item.label} />\r\n                    ))}\r\n                </Nav>\r\n            </Header>\r\n            <Main>\r\n            <Box pad=\"small\">\r\n                \r\n            </Box>   \r\n                <Box fill align=\"center\">\r\n                    <Box width=\"medium\">\r\n                        <Header  pad=\"small\">\r\n                            <Heading level={2} size=\"medium\">\r\n                            A new Community\r\n                            </Heading>\r\n                        </Header>         \r\n                        <CreateCommunityForm current_user={data.me.pk} /> \r\n                    </Box>\r\n                </Box>\r\n            </Main >\r\n            </>\r\n        )\r\n\r\n\r\n\r\n   \r\n\r\n}\r\nexport default CreateCommunity\r\n","import * as Yup from \"yup\";\r\n\r\nexport const CreateEventSchema = Yup.object().shape({\r\n    name : Yup.string()\r\n    .min(5, 'Too Short!')\r\n    .max(200, 'Too Long!')\r\n    .required('Required'),\r\n\r\n    description : Yup.string()\r\n    .min(15, 'Too Short!')\r\n    .max(1000, 'Too Long!')\r\n    .required('Required'),\r\n\r\n    position :  Yup.string()\r\n    .min(4, 'Too Short!')\r\n    .max(400, 'Too Long!')\r\n    .required('Required'),\r\n\r\n    startAt : Yup.date()\r\n    .required('Required'),\r\n    \r\n    endAt : Yup.date()\r\n    .required('Required')\r\n})","import React, { useState } from \"react\";\r\n\r\nimport { CreateEventSchema } from \"./schema/index\";\r\n\r\nimport { useHistory, useRouteMatch } from \"react-router-dom\";\r\n\r\nimport { CREATE_EVENT } from \"../../../api/events/index\";\r\nimport moment from \"moment\";\r\nimport { useMutation } from \"react-apollo\";\r\n\r\nimport { RegistrationErrorHandler } from \"../../../utils/handlers/errors/index\";\r\nimport { RegistrationSuccessHandler } from \"../../../utils/handlers/success/index\";\r\n\r\nimport DatePicker from \"react-datepicker\";\r\nimport { useFormik } from \"formik\";\r\nimport {\r\n    Button,\r\n    Form,\r\n    FormField as Field,\r\n    TextArea,\r\n    Markdown,\r\n    Layer,\r\n    Box,\r\n    Heading,\r\n} from \"grommet\";\r\nimport { Close, View } from \"grommet-icons\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nexport default function EventCreationForm(props) {\r\n    const [user_id] = useState(props.current_user);\r\n    const [createEvent, { data, loading, error }] = useMutation(CREATE_EVENT);\r\n    const [endAtDate, setEndAtDate] = useState(new Date());\r\n    const [startAtDate, setStartAtDate] = useState(new Date());\r\n    const history = useHistory();\r\n    const match = useRouteMatch();\r\n    const [open, setOpen] = useState(false);\r\n    const onOpen = () => setOpen(true);\r\n\r\n    const onClose = () => setOpen(undefined);\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            name: \"\",\r\n            description: \"\",\r\n            position: \"\",\r\n            startAt: startAtDate,\r\n            endAt: endAtDate,\r\n        },\r\n        validationSchema: CreateEventSchema,\r\n        onSubmit: async (values) => {\r\n            await new Promise(\r\n                createEvent({\r\n                    variables: {\r\n                        name: values.name,\r\n                        eventCreator: user_id,\r\n                        description: values.description,\r\n                        position: values.position,\r\n                        startAt: moment(values.startAt).format(\"YYYY-MM-DD\"),\r\n                        endAt: moment(values.endAt).format(\"YYYY-MM-DD\"),\r\n                    },\r\n                }).then((data) => {\r\n                    if (data.data.addEvent.errors.length < 1) {\r\n                        let event_id = data.data.addEvent.event.id;\r\n                        let community_slug = match.params.slug;\r\n                        history.push(\r\n                            `/communities/${community_slug}/event/${event_id}`\r\n                        );\r\n                    }\r\n                })\r\n            );\r\n        },\r\n    });\r\n    if (error) console.log(error);\r\n    if (loading) return <p>{loading}</p>;\r\n    return (\r\n        <>\r\n            {data ? (\r\n                <>\r\n                    <RegistrationErrorHandler\r\n                        data={data.addEvent}\r\n                        error_field=\"messages\"\r\n                    />\r\n                    <RegistrationSuccessHandler\r\n                        data={data.addEvent}\r\n                        message=\"Event created successfuly you will be redirected soon\"\r\n                    />\r\n                </>\r\n            ) : undefined}\r\n\r\n            <Form>\r\n                <label htmlFor=\"name\"></label>\r\n                <Field\r\n                    id=\"name\"\r\n                    name=\"name\"\r\n                    placeholder=\"your event name\"\r\n                    type=\"text\"\r\n                    onChange={formik.handleChange}\r\n                />\r\n                {formik.errors.name && formik.touched.name ? (\r\n                    <div>{formik.errors.name}</div>\r\n                ) : null}\r\n\r\n                <label htmlFor=\"position\"></label>\r\n                <Field\r\n                    id=\"position\"\r\n                    name=\"position\"\r\n                    placeholder=\"your event position\"\r\n                    onChange={formik.handleChange}\r\n                />\r\n                {formik.errors.position && formik.touched.position ? (\r\n                    <div>{formik.errors.position}</div>\r\n                ) : null}\r\n\r\n                <label htmlFor=\"description\"></label>\r\n                <Button icon={<View />} onClick={onOpen} />\r\n                <TextArea\r\n                    id=\"description\"\r\n                    name=\"description\"\r\n                    placeholder=\"your event description\"\r\n                    onChange={formik.handleChange}\r\n                    size=\"xlarge\"\r\n                    resize={false}\r\n                />\r\n                {formik.errors.description && formik.touched.description ? (\r\n                    <div>{formik.errors.description}</div>\r\n                ) : null}\r\n\r\n                <label htmlFor=\"startAt\">Start at</label>\r\n                <DatePicker\r\n                    id=\"startAt\"\r\n                    name=\"startAt\"\r\n                    selected={startAtDate}\r\n                    onChange={(date) => {\r\n                        let newdate = moment(date).format(\"YYYY-MM-DD\");\r\n                        setStartAtDate(date);\r\n                        formik.setFieldValue(\"startAt\", newdate);\r\n                    }}\r\n                />\r\n                <br></br>\r\n                {formik.errors.startAt && formik.touched.startAt ? (\r\n                    <div>{formik.errors.startAt}</div>\r\n                ) : null}\r\n\r\n                <label htmlFor=\"endAt\">End at</label>\r\n                <DatePicker\r\n                    id=\"endAt\"\r\n                    name=\"endAt\"\r\n                    selected={endAtDate}\r\n                    onChange={(date) => {\r\n                        let newdate = moment(date).format(\"YYYY-MM-DD\");\r\n                        setEndAtDate(date);\r\n                        formik.setFieldValue(\"endAt\", newdate);\r\n                    }}\r\n                />\r\n                <br></br>\r\n                {formik.errors.endAt && formik.touched.endAt ? (\r\n                    <div>{formik.errors.endAt}</div>\r\n                ) : null}\r\n\r\n                <Button\r\n                    primary\r\n                    color=\"dark-1\"\r\n                    label=\"Submit\"\r\n                    onClick={formik.handleSubmit}\r\n                    type=\"submit\"\r\n                ></Button>\r\n            </Form>\r\n\r\n            \r\n            {open && (\r\n                <Layer\r\n                    onClickOutside={onClose}\r\n                    onEsc={onClose}\r\n                    margin={{\r\n                        left: \"40px\",\r\n                        top: \"50px\",\r\n                        right: \"30px\",\r\n                        bottom: \"10px\",\r\n                    }}\r\n                >\r\n                    <Box flex={false} direction=\"row\" justify=\"between\">\r\n                        <Heading level={2} margin=\"none\">\r\n                            Description preview\r\n                        </Heading>\r\n                        <Button icon={<Close />} onClick={onClose} />\r\n                    </Box>\r\n\r\n                    <Box\r\n                        width=\"100vw\"\r\n                        margin={{\r\n                            left: \"2px\",\r\n                            top: \"2px\",\r\n                            right: \"2px\",\r\n                            bottom: \"2px\",\r\n                        }}\r\n                        height=\"80vh\"\r\n                        overflow=\"auto\"\r\n                    >\r\n                        <Markdown>{formik.values.description}</Markdown>\r\n                    </Box>\r\n                </Layer>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n","import React from \"react\";\r\nimport { useMutation, useQuery } from \"react-apollo\";\r\nimport {\r\n  GET_CUMMUNITY_JOIN_REQUEST,\r\n  GET_COMMUNITY_MEMBERS,\r\n  ACCEPT_COMMUNITY_JOIN_REQUEST,\r\n} from \"../../../../api/communitys/index\";\r\nimport { Heading, List, Box, Button, Text} from \"grommet\";\r\nimport {useHistory } from \"react-router-dom\";\r\n\r\nexport function JoinCommunityRequestList(props) {\r\n  const { data, loading} = useQuery(GET_CUMMUNITY_JOIN_REQUEST, {\r\n    variables: { slug: props.slug },\r\n  });\r\n\r\n  const [acceptRequest] = useMutation(\r\n    ACCEPT_COMMUNITY_JOIN_REQUEST\r\n  );\r\n\r\n  if (loading && !data) return <div>Loading ... </div>;\r\n  return (\r\n    <>\r\n      {data ? (\r\n        <List data={data.getCommunityJoinRequests}>\r\n          {(element) => (\r\n            <Box key={element.id} fill>\r\n              <Heading level=\"4\">\r\n                {element.member.firstName} {element.member.lastName}\r\n              </Heading>\r\n              <Button\r\n                primary\r\n                color=\"dark-1\"\r\n                label=\"accept this user\"\r\n                onClick={(event) => {\r\n                  acceptRequest({\r\n                    variables: { id: Number(element.id) },\r\n                  });\r\n                }}\r\n                type=\"button\"\r\n              ></Button>\r\n            </Box>\r\n          )}\r\n        </List>\r\n      ) : (\r\n        <div>Nothing here to see ...</div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport function CommunityMemebersList(props) {\r\n  const { data, loading } = useQuery(GET_COMMUNITY_MEMBERS, {\r\n    variables: { slug: props.slug },\r\n  });\r\n\r\n  const history = useHistory()\r\n\r\n  if (loading && !data) return <div>Loading ... </div>;\r\n  return (\r\n    <>\r\n      {data ? (\r\n        <List\r\n          primaryKey={item=>(\r\n            <Text>{item.member.email}</Text>\r\n          )}\r\n          secondaryKey=\"\"\r\n          onClickItem={event=>{\r\n            history.push(`/profiles/${event.item.username}`)\r\n          }}\r\n          data={data.getCommunityMembers}\r\n        />\r\n      ) : (\r\n        <div>Nothing here to see ...</div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import React  from \"react\"\r\nimport { Heading , Text,  Box, List } from 'grommet';\r\nimport {GET_COMMUNITY_EVENTS_BY_SLUG} from \"../../../../api/events/index\"\r\nimport {useHistory, useRouteMatch} from \"react-router-dom\";\r\nimport {useQuery} from 'react-apollo';\r\n\r\nexport default function CommunityEventsList(props){\r\n\r\n    \r\n    const location = useRouteMatch();\r\n    const history = useHistory()\r\n   \r\n    const {data, loading , error}= useQuery(GET_COMMUNITY_EVENTS_BY_SLUG,{\r\n        variables : { slug: location.params.slug }\r\n    })\r\n\r\n    if (error) console.log(error)\r\n    if (loading) return <div>Loading</div>\r\n    return(\r\n        <>\r\n        {data ? \r\n            (\r\n                <List data={data.getCommunityEventsBySlug} >\r\n                    {  \r\n                    (element)=>(     \r\n                        <Box  key={element.id}  onClick={event=>\r\n                            (history.push(`/communities/${props.community_slug}/event/${element.id}`))\r\n                        } \r\n                        fill>\r\n                                <Heading level=\"4\" >{element.name}</Heading>\r\n                                <Text size=\"small\"> on {element.startAt}</Text>\r\n                                <Text size=\"small\"> place  {element.position}</Text>\r\n                              \r\n                               \r\n                        </Box>                        \r\n                    )\r\n                    }\r\n                </List>\r\n            )\r\n            : <div>Loading...</div>}\r\n            </>\r\n    )\r\n}","import React from \"react\";\r\n//import queryString from \"query-string\"\r\nimport { useRouteMatch } from \"react-router-dom\";\r\nimport EventCreationForm from \"../../../components/forms/eventCreationForm/index\";\r\nimport {JoinCommunityRequestList, CommunityMemebersList} from \"./ReqList/index\"\r\nimport {\r\n  GET_CURRENT_COMMUNITY_BY_SLUG,\r\n  ADD_COMMUNITY_JOIN_REQUEST,\r\n} from \"../../../api/communitys/index\";\r\n\r\nimport { useQuery, useMutation } from \"react-apollo\";\r\nimport {\r\n  Heading,\r\n  Text,\r\n  Anchor,\r\n  Header,\r\n  Nav,\r\n  Main,\r\n  Box,\r\n  Tabs,\r\n  Tab,\r\n  Button,\r\n} from \"grommet\";\r\n\r\nimport CommunityEventsList from \"./eventsList/index\";\r\nimport moment from \"moment\";\r\n\r\nconst items = [\r\n  { label: \"go back to dashboard\", href: \"/dashboard/me\" },\r\n  { label: \"Logout \", href: \"/logout\" },\r\n];\r\n\r\nexport default function CommunityPage() {\r\n  const location = useRouteMatch();\r\n\r\n  const [addJoinReq] = useMutation(ADD_COMMUNITY_JOIN_REQUEST);\r\n  \r\n\r\n  const { data, loading, error } = useQuery(GET_CURRENT_COMMUNITY_BY_SLUG, {\r\n    variables: { slug: location.params.slug },\r\n  });\r\n\r\n\r\n  let handleJoinCommunity = async (event) => {\r\n    addJoinReq({\r\n      variables: {\r\n        community: Number(data.getCommunitysBySlug.community.id),\r\n      },\r\n    })\r\n  };\r\n\r\n  if (error) console.log(error);\r\n\r\n  if (loading) return <div>Loading</div>;\r\n\r\n  const is_owner =\r\n    data.getCommunitysBySlug.owner.email === localStorage.getItem(\"user_email\");\r\n\r\n  return (\r\n    <>\r\n      <Header background=\"dark-1\" pad=\"small\">\r\n        <Nav direction=\"row\">\r\n          {items.map((item) => (\r\n            <Anchor href={item.href} label={item.label} key={item.label} />\r\n          ))}\r\n        </Nav>\r\n      </Header>\r\n      <Main>\r\n        <Box fill align=\"center\">\r\n          <Header\r\n            background={{\r\n              color: \"#CDEAC4\",\r\n            }}\r\n            pad={{ bottom: \"medium\" }}\r\n            direction=\"column\"\r\n            fill\r\n          >\r\n            <Heading level={1} color=\"white\" size=\"large\" width=\"100vw\">\r\n              {data ? data.getCommunitysBySlug.community.name : undefined}\r\n            </Heading>\r\n\r\n            <Text>\r\n              Owner : {data.getCommunitysBySlug.owner.firstName}{\" \"}\r\n              {data.getCommunitysBySlug.owner.lastName}\r\n            </Text>\r\n            <Text>\r\n              created at :{\" \"}\r\n              {moment(data.getCommunitysBySlug.community.createdAt).format(\r\n                \"MMM Do YYYY\"\r\n              )}{\" \"}\r\n            </Text>\r\n            {!is_owner ? (\r\n              <Button\r\n                primary\r\n                color=\"dark-1\"\r\n                label=\"join this community\"\r\n                onClick={handleJoinCommunity}\r\n                type=\"button\"\r\n              ></Button>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </Header>\r\n          <Box width=\"large\">\r\n            <Tabs>\r\n              <Tab title=\"Events\">\r\n                <CommunityEventsList community_slug={location.params.slug} />\r\n              </Tab>\r\n              <Tab title=\"Members\">\r\n               <CommunityMemebersList  slug={location.params.slug }/>\r\n              </Tab>\r\n              {is_owner ? (\r\n              <Tab title=\"Join Request\">\r\n                 <JoinCommunityRequestList slug={location.params.slug } />\r\n              </Tab>\r\n              ) : undefined}\r\n              {is_owner ? (\r\n                <Tab title=\"add Events\">\r\n                  <Box pad=\"medium\">\r\n                    <EventCreationForm\r\n                      current_user={data.getCommunitysBySlug.id}\r\n                    />\r\n                  </Box>\r\n                </Tab>\r\n              ) : undefined}\r\n            </Tabs>\r\n          </Box>\r\n        </Box>\r\n      </Main>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { List, Button, Text } from \"grommet\";\r\nimport { useQuery, useMutation } from \"react-apollo\";\r\nimport {useHistory} from \"react-router-dom\"\r\nimport {\r\n  GET_EVENT_REQUEST_ACCEPTED,\r\n  GET_EVENT_REQUEST_PENDING,\r\n  ACCEPT_EVENT_JOIN_REQUEST,\r\n} from \"../../../../api/events/index\";\r\n\r\nexport function EventJoinRequestList(props) {\r\n  const [acceptEvent] = useMutation(ACCEPT_EVENT_JOIN_REQUEST);\r\n  const { data, loading } = useQuery(GET_EVENT_REQUEST_PENDING, {\r\n      variables : {id : Number(props.id)}\r\n  });\r\n\r\n  if (loading) return <div> Loading ... </div>;\r\n  return (\r\n    <List\r\n      primaryKey={(item) => (\r\n        <div>\r\n          <Text>{item.member.email}</Text>\r\n          <Button onClick={(event) => {\r\n             acceptEvent({\r\n                 variables : {id: item.id}\r\n             })\r\n          }} label=\"Accept\"></Button>\r\n        </div>\r\n      )}\r\n      data={data.getEventRequestPending}\r\n    ></List>\r\n  );\r\n}\r\n\r\n\r\nexport function EventMemebersList(props) {\r\n    const history = useHistory()\r\n    const { data, loading } = useQuery(GET_EVENT_REQUEST_ACCEPTED, {\r\n        variables : {id : Number(props.id)}\r\n    });\r\n  \r\n    if (loading) return <div> Loading ... </div>;\r\n    return (\r\n      <List\r\n        primaryKey={(item) => (\r\n          <div>\r\n            <Text>{item.member.email}</Text>\r\n          </div>\r\n        )}\r\n        onClickItem={(event)=>{\r\n            history.push(`/profiles/${event.item.member.id}`)\r\n        }}\r\n        data={data.getEventRequestAccepted}\r\n      ></List>\r\n    );\r\n  }\r\n  ","import React from \"react\";\r\nimport { useRouteMatch } from \"react-router-dom\";\r\nimport { useQuery, useMutation } from \"react-apollo\";\r\nimport {\r\n  GET_CURRENT_EVENT,\r\n  CREATE_EVENT_JOIN_REQUEST,\r\n} from \"../../../api/events/index\";\r\nimport { EventJoinRequestList, EventMemebersList } from \"./RequestMembers/index\";\r\nimport {\r\n  Heading,\r\n  Text,\r\n  Anchor,\r\n  Header,\r\n  Nav,\r\n  Main,\r\n  Box,\r\n  Paragraph,\r\n  Button,\r\n  Tabs,\r\n  Tab,\r\n} from \"grommet\";\r\nimport moment from \"moment\";\r\n\r\nconst items = [\r\n  { label: \"go back to dashboard\", href: \"/dashboard/me\" },\r\n  { label: \"Logout \", href: \"/logout\" },\r\n];\r\n\r\nexport default function EventPage() {\r\n  const location = useRouteMatch();\r\n  const [createEventJoinRequest] = useMutation(CREATE_EVENT_JOIN_REQUEST);\r\n  const { data, error, loading } = useQuery(GET_CURRENT_EVENT, {\r\n    variables: { id: location.params.id },\r\n  });\r\n\r\n  if (error) return <div> Error</div>;\r\n  if (loading) return <div>Loading ... </div>;\r\n\r\n  return (\r\n    <>\r\n      <Header background=\"dark-1\" pad=\"small\">\r\n        <Nav direction=\"row\">\r\n          {items.map((item) => (\r\n            <Anchor href={item.href} label={item.label} key={item.label} />\r\n          ))}\r\n        </Nav>\r\n      </Header>\r\n\r\n      <Main>\r\n        <Box fill align=\"center\">\r\n          <Header\r\n            background={{\r\n              color: \"#CDEAC4\",\r\n            }}\r\n            pad={{ bottom: \"medium\" }}\r\n            direction=\"column\"\r\n            fill\r\n          >\r\n            <Heading level={1} color=\"white\" size=\"large\">\r\n              {data ? data.getCurrentEvent.name : undefined}\r\n            </Heading>\r\n\r\n            <Text>\r\n              Owner : {data.getCurrentEvent.eventCreator.owner.firstName}{\" \"}\r\n              {data.getCurrentEvent.eventCreator.owner.lastName}{\" \"}\r\n            </Text>\r\n            <Text>\r\n              Community : {data.getCurrentEvent.eventCreator.owner.firstName}{\" \"}\r\n              {data.getCurrentEvent.eventCreator.community.lastName}{\" \"}\r\n            </Text>\r\n            <Text>\r\n              created at :{\" \"}\r\n              {moment(data.getCurrentEvent.createdAt).format(\"MMM Do YYYY\")}{\" \"}\r\n            </Text>\r\n            <Button\r\n              label=\"join this event\"\r\n              onClick={() => {\r\n                createEventJoinRequest({\r\n                  variables: { eventId: data.getCurrentEvent.id },\r\n                });\r\n              }}\r\n            ></Button>\r\n          </Header>\r\n        </Box>\r\n\r\n        <Box width=\"medium\" margin=\"large\" pad=\"medium\">\r\n          <Tabs>\r\n            <Tab title=\"Join requests\">\r\n              <EventJoinRequestList  id={data.getCurrentEvent.id}/>\r\n            </Tab>\r\n            <Tab title=\"Members\">\r\n            <EventMemebersList id={data.getCurrentEvent.id}/>\r\n            </Tab>\r\n          </Tabs>\r\n          <Anchor\r\n            label=\"Go to community page\"\r\n            href={`/communities/${data.getCurrentEvent.eventCreator.community.slug}`}\r\n          />\r\n          <Paragraph textAlign=\"center\">\r\n            {data.getCurrentEvent.description}\r\n          </Paragraph>\r\n        </Box>\r\n      </Main>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route\r\n} from \"react-router-dom\";\r\n\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { ApolloProvider } from '@apollo/react-hooks'\r\nimport {apolloClient} from \"./apolloClient\"\r\n\r\nimport Home from \"./pages/home/index\"\r\nimport Signup from \"./pages/registration/signup/index\"\r\nimport Signin from \"./pages/registration/signin/index\"\r\nimport Logout from \"./pages/registration/logout/index\"\r\nimport Dashboard from \"./pages/events/dashboard/index\"\r\nimport CreateCommunity from \"./pages/groups/create_community/index\"\r\nimport CommunityPage from \"./pages/groups/community_page/index\"\r\nimport EventPage from \"./pages/events/event/index\"\r\nimport './index.css';\r\nimport {  Grommet } from 'grommet';\r\nimport { grommet } from 'grommet/themes';\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n  <ApolloProvider client={apolloClient}>\r\n    <Router>\r\n    <Grommet theme={grommet}>\r\n    <Switch>\r\n      \r\n      <Route exact path=\"/\" component={Home} />\r\n     \r\n      <Route exact path=\"/signup\" component={Signup} />\r\n   \r\n      <Route exact path=\"/signin\" component={Signin} />\r\n\r\n      <Route exact path=\"/logout\" component={Logout} />\r\n\r\n      <Route  path=\"/dashboard/:name\" component={Dashboard} />\r\n      \r\n      <Route exact   path=\"/create-community\" component={CreateCommunity} />\r\n\r\n      <Route exact   path=\"/communities/:slug\" component={CommunityPage} />\r\n\r\n      <Route path=\"/communities/:slug/event/:id\" component={EventPage} />\r\n\r\n      <Route path=\"/event/:id\" component={EventPage} />\r\n     \r\n      </Switch>\r\n      </Grommet>     \r\n    </Router>\r\n    </ApolloProvider>    \r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from \"react\"\r\nimport {Redirect} from 'react-router-dom'\r\nimport { apolloClient } from \"../../../apolloClient\"\r\nexport default function Logout(){\r\n    localStorage.removeItem('jwt')\r\n    localStorage.removeItem('jwt_refresh')\r\n    localStorage.removeItem('user_id')\r\n    apolloClient.resetStore()\r\n    return <Redirect to=\"/\" />\r\n}"],"sourceRoot":""}